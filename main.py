import os
import csv
import time
import logging
from threading import Event
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- #
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))
ADMIN_IDS = [int(id) for id in os.getenv('ADMIN_IDS').split(',')]
CSV_FILE = os.getenv('CSV_FILE', 'username.csv')
DELAY = int(os.getenv('DELAY_SECONDS', 7))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = Bot(token=TOKEN)
stop_event = Event()
session_stats = {'success': 0, 'failed': 0, 'total': 0}

# --- –£—Ç–∏–ª–∏—Ç—ã --- #
def restricted(func):
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.effective_user.id not in ADMIN_IDS:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

async def notify_admin(message: str):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(chat_id=admin_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --- #
async def add_user_to_group(username: str, context: ContextTypes.DEFAULT_TYPE):
    if not username.startswith('@'):
        username = f'@{username}'
    
    try:
        await context.bot.add_chat_member(chat_id=GROUP_ID, user_id=username)
        session_stats['success'] += 1
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω {username}")
        return True
    except Exception as e:
        session_stats['failed'] += 1
        logger.warning(f"–û—à–∏–±–∫–∞ —Å {username}: {str(e)}")
        return False

async def process_users(usernames: list, context: ContextTypes.DEFAULT_TYPE):
    session_stats['total'] = len(usernames)
    
    for idx, username in enumerate(usernames, 1):
        if stop_event.is_set():
            logger.info("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        
        await add_user_to_group(username, context)
        
        if idx % 10 == 0:
            progress = f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {idx}/{session_stats['total']} (–£—Å–ø–µ—à–Ω–æ: {session_stats['success']}, –û—à–∏–±–∫–∏: {session_stats['failed']})"
            await notify_admin(progress)
        
        time.sleep(DELAY)
    
    report = (
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        f"–í—Å–µ–≥–æ: {session_stats['total']}\n"
        f"–£—Å–ø–µ—à–Ω–æ: {session_stats['success']}\n"
        f"–û—à–∏–±–∫–∏: {session_stats['failed']}"
    )
    await notify_admin(report)

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ --- #
@restricted
async def start_invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    usernames = load_usernames()
    if not usernames:
        await update.message.reply_text("‚ùå –§–∞–π–ª —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await update.message.reply_text(
        f"üöÄ –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(usernames)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    )
    
    context.job_queue.run_once(
        lambda ctx: process_users(usernames, ctx),
        when=0
    )

# --- –ó–∞–ø—É—Å–∫ --- #
def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_invite))
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    
    application.run_polling()

if __name__ == '__main__':
    main()
