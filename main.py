import os
import csv
import time
import logging
from threading import Event
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    DispatcherHandlerStop
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- #
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))
ADMIN_IDS = [int(id) for id in os.getenv('ADMIN_IDS').split(',')]
CSV_FILE = os.getenv('CSV_FILE', 'username.csv')
DELAY = int(os.getenv('DELAY_SECONDS', 7))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = Bot(token=TOKEN)
stop_event = Event()
session_stats = {'success': 0, 'failed': 0, 'total': 0}

# --- –£—Ç–∏–ª–∏—Ç—ã --- #
def restricted(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º"""
    def wrapped(update, context, *args, **kwargs):
        if update.effective_user.id not in ADMIN_IDS:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            raise DispatcherHandlerStop
        return func(update, context, *args, **kwargs)
    return wrapped

def notify_admin(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º"""
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(chat_id=admin_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --- #
def load_usernames(filename: str = CSV_FILE):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –∏–∑ CSV"""
    try:
        with open(filename, mode='r', encoding='utf-8') as file:
            return [row[0].strip() for row in csv.reader(file) if row]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return []

def add_user_to_group(username: str, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not username.startswith('@'):
        username = f'@{username}'
    
    try:
        context.bot.add_chat_member(
            chat_id=GROUP_ID,
            user_id=username
        )
        session_stats['success'] += 1
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω {username}")
        return True
    except Exception as e:
        session_stats['failed'] += 1
        logger.warning(f"–û—à–∏–±–∫–∞ —Å {username}: {str(e)}")
        return False

def process_users(usernames: list, context: CallbackContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    session_stats['total'] = len(usernames)
    
    for idx, username in enumerate(usernames, 1):
        if stop_event.is_set():
            logger.info("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        
        add_user_to_group(username, context)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if idx % 10 == 0:
            progress = f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {idx}/{session_stats['total']} " \
                     f"(–£—Å–ø–µ—à–Ω–æ: {session_stats['success']}, " \
                     f"–û—à–∏–±–∫–∏: {session_stats['failed']})"
            notify_admin(progress)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏
        time.sleep(DELAY)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = (
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        f"–í—Å–µ–≥–æ: {session_stats['total']}\n"
        f"–£—Å–ø–µ—à–Ω–æ: {session_stats['success']}\n"
        f"–û—à–∏–±–∫–∏: {session_stats['failed']}"
    )
    notify_admin(report)

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ --- #
@restricted
def start_invite(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    if stop_event.is_set():
        stop_event.clear()
    
    usernames = load_usernames()
    if not usernames:
        update.message.reply_text("‚ùå –§–∞–π–ª —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    update.message.reply_text(
        f"üöÄ –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(usernames)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    )
    
    # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    context.job_queue.run_once(
        lambda ctx: process_users(usernames, ctx),
        when=0
    )

@restricted
def stop_invite(update: Update, context: CallbackContext):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
    stop_event.set()
    update.message.reply_text("üõë –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

@restricted
def stats(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    stats_text = (
        "üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ: {session_stats['total']}\n"
        f"–£—Å–ø–µ—à–Ω–æ: {session_stats['success']}\n"
        f"–û—à–∏–±–∫–∏: {session_stats['failed']}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {session_stats['total'] - session_stats['success'] - session_stats['failed']}"
    )
    update.message.reply_text(stats_text)

@restricted
def add_single(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    if not context.args:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add @username")
        return
    
    username = context.args[0]
    if add_user_to_group(username, context):
        update.message.reply_text(f"‚úÖ {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {username}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --- #
def main():
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start_invite))
    dp.add_handler(CommandHandler("stop", stop_invite))
    dp.add_handler(CommandHandler("stats", stats))
    dp.add_handler(CommandHandler("add", add_single))

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    notify_admin("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()