import os
import csv
import asyncio
import logging
from threading import Event
from dotenv import load_dotenv
from telegram import (
    Bot,
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- #
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))
ADMIN_IDS = [int(id) for id in os.getenv('ADMIN_IDS').split(',')]
CSV_FILE = os.getenv('CSV_FILE', 'username.csv')
DELAY = int(os.getenv('DELAY_SECONDS', 5))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
stop_event = Event()
session_stats = {'success': 0, 'failed': 0, 'total': 0}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --- #
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")],
            [KeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

# --- –£—Ç–∏–ª–∏—Ç—ã --- #
def restricted(func):
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.effective_user.id not in ADMIN_IDS:
            await update.message.reply_text(
                "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str):
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

def load_usernames():
    try:
        with open(CSV_FILE, mode='r', encoding='utf-8') as file:
            return [row[0].strip() for row in csv.reader(file) if row]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return []

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --- #
async def add_user_to_group(username: str, context: ContextTypes.DEFAULT_TYPE):
    if not username.startswith('@'):
        username = f'@{username}'
    
    try:
        user = await context.bot.get_chat(username)
        await context.bot.add_chat_member(
            chat_id=GROUP_ID,
            user_id=user.id
        )
        session_stats['success'] += 1
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω {username}")
        return True
    except Exception as e:
        session_stats['failed'] += 1
        logger.warning(f"–û—à–∏–±–∫–∞ —Å {username}: {str(e)}")
        return False

async def process_users(context: ContextTypes.DEFAULT_TYPE):
    usernames = load_usernames()
    if not usernames:
        await notify_admin(context, "‚ùå –§–∞–π–ª —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    session_stats['total'] = len(usernames)
    
    for idx, username in enumerate(usernames, 1):
        if stop_event.is_set():
            logger.info("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await notify_admin(context, "‚èπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return
        
        await add_user_to_group(username, context)
        
        if idx % 10 == 0:
            progress = (
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {idx}/{session_stats['total']}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {session_stats['success']}\n"
                f"‚ùå –û—à–∏–±–∫–∏: {session_stats['failed']}"
            )
            await notify_admin(context, progress)
        
        await asyncio.sleep(DELAY)
    
    report = (
        "üéâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        f"–í—Å–µ–≥–æ: {session_stats['total']}\n"
        f"–£—Å–ø–µ—à–Ω–æ: {session_stats['success']}\n"
        f"–û—à–∏–±–∫–∏: {session_stats['failed']}"
    )
    await notify_admin(context, report)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π --- #
@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
        reply_markup=get_main_keyboard()
    )

@restricted
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        if stop_event.is_set():
            stop_event.clear()
        
        await update.message.reply_text(
            "üîç –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            reply_markup=get_main_keyboard()
        )
        asyncio.create_task(process_users(context))
    
    elif text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
        stop_event.set()
        await update.message.reply_text(
            "üõë –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=get_main_keyboard()
        )
    
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats_text = (
            "üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {session_stats['total']}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {session_stats['success']}\n"
            f"‚Ä¢ –û—à–∏–±–∫–∏: {session_stats['failed']}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {session_stats['total'] - session_stats['success'] - session_stats['failed']}"
        )
        await update.message.reply_text(
            stats_text,
            reply_markup=get_main_keyboard()
        )
    
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data['awaiting_username'] = True
    
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_keyboard()
        )
        context.user_data.pop('awaiting_username', None)
    
    elif context.user_data.get('awaiting_username'):
        username = text.strip()
        if await add_user_to_group(username, context):
            await update.message.reply_text(
                f"‚úÖ {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                reply_markup=get_main_keyboard()
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {username}",
                reply_markup=get_main_keyboard()
            )
        context.user_data.pop('awaiting_username', None)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --- #
async def post_init(application: Application):
    await application.bot.send_message(
        chat_id=ADMIN_IDS[0],
        text="ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!",
        reply_markup=get_main_keyboard()
    )

def main():
    application = Application.builder() \
        .token(TOKEN) \
        .post_init(post_init) \
        .build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))

    application.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == '__main__':
    main()
